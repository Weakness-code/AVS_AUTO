import types
import requests
import datetime
from bs4 import BeautifulSoup


domen = 'https://avs-auto.ru'


def extractor(cell: str, product_class: type):
    cell[5].value = float(cell[5].value.replace(',', '.'))
    if cell[5].value > 50:
        new_price = (cell[5].value * 1.4 // 5 + 1) * 5
    else:
        new_price = (cell[5].value * 1.7 // 5 + 1) * 5

    from_site = parser(cell[1].value, cell[2].value)
    time = datetime.datetime.now().astimezone().replace(microsecond=0).isoformat()
    return product_class(Id=cell[0].value,
                         DateBegin=(time if cell[6].value == "–í –Ω–∞–ª–∏—á–∏–∏" else ''),
                         DateEnd=(time if cell[6].value != "–í –Ω–∞–ª–∏—á–∏–∏" else ''),
                         Title=cell[2].value,
                         Description=from_site['description'],
                         Price=new_price,
                         ImageUrls=from_site['images'],
                         VideoUrl=from_site['video'],
                         OEM = from_site['articul'])


def parser(number: str, name: str):
    link_to_find = f'{domen}/catalog/all/?query={number}'
    response_to_find = requests.get(link_to_find).content
    soup_to_find = BeautifulSoup(response_to_find, 'html.parser')

    link_to_product = f'{domen}{soup_to_find.find("a", {"class": "wrapper"})["href"]}'
    response_to_product = requests.get(link_to_product).content
    soup_to_product = BeautifulSoup(response_to_product, 'html.parser')

    gallery = soup_to_product.find('div', {'class': 'product-main_photo rs-gallery-full'})
    videos = soup_to_product.find('div', {'class': 'youTubeProductVideo'})
    try:
        description = soup_to_product.find('div', {'id': 'property'}).contents
    except AttributeError:
        try:
            description = soup_to_product.find('div',
                                               {'class': 'page-product_description '
                                                         'characteristics left list-unstyled'}).contents
        except AttributeError:
            description = ''
    images_links = ''
    for i, image in zip(range(10), gallery.find_all('a')):
        images_links += f'{domen}{image["href"]} | '
    images_links = images_links[0:len(images_links) - 3]

    video = ''
    if videos != None:
        video = videos.find('iframe')['src']

    f_description = f'<p>–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}</p>'\
                    f"<p>–ê—Ä—Ç–∏–∫—É–ª: {number}</p>"
    for string in description:
        f_description += str(string)
    f_description += '<p>__________________________________________________</p> ' \
                     '<p>‚ù§ –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –ò–ó–ë–†–ê–ù–ù–û–ï, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –≤–∏–¥—É!</p> ' \
                     '<p>üîé–°–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ</p> ' \
                     '<p>üìå–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω –∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–∞!</p> ' \
                     '<p>üíº–ú—ã —è–≤–ª—è–µ–º—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –¥–∏–ª–µ—Ä–æ–º –¢–ú RedVerg, Concorde, –ö–≤–∞–ª–∏—Ç–µ—Ç</p> ' \
                     '<p>‚öô–£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä.</p> ' \
                     '<p>üí∞–î–ª—è –æ–ø—Ç–æ–≤–∏–∫–æ–≤ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è.</p> ' \
                     '<p>ü§ù–†–∞–±–æ—Ç–∞–µ–º —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ —Å –ù–î–°, –±–µ–∑ –ù–î–°.</p> ' \
                     '<p>üìû–ó–≤–æ–Ω–∏—Ç–µ –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç Avito, Whats App, Viber, ' \
                     '–º—ã –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.</p><br />'

    return {'images': images_links,
            'description': f_description,
            'video': video,
            'articul': number}
